pipeline {
    agent any

    stages { 
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/joseh-my-projects/jenkins.git'
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS']]) {
                    // Login to ECR
                    sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 573055573761.dkr.ecr.us-east-1.amazonaws.com/ecs-images"  
                }
            }
        }
        stage('Build And Tag') {
            steps {
                // Build Docker image
                sh "docker build -t sample-app:v${BUILD_NUMBER} ."
        
                // Tag Docker image
                sh "docker tag sample-app:v${BUILD_NUMBER} 573055573761.dkr.ecr.us-east-1.amazonaws.com/ecs-images:sample-app-v${BUILD_NUMBER}"

                // Show images
                sh "docker images"
            }
        }
        stage('Push') {
            steps {
                // Push Docker image to ECR
                sh "docker push 573055573761.dkr.ecr.us-east-1.amazonaws.com/ecs-images:sample-app-v${BUILD_NUMBER}"
                sh "docker image prune -f --force"
            }
        }
        stage('Deploy to ECS') {
            steps {
                sh '''
                TASK_DEFINITION=\$(aws ecs describe-task-definition --task-definition my-ecs-task)
                NEW_IMAGE="573055573761.dkr.ecr.us-east-1.amazonaws.com/ecs-images:sample-app-v${BUILD_NUMBER}"
                echo \$TASK_DEFINITION | jq --arg IMAGE "\$NEW_IMAGE" '.taskDefinition | .containerDefinitions[0].image = \$IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' > new-task-def.json
                NEW_TASK_DEFINITION_ARN=\$(aws ecs register-task-definition --cli-input-json file://new-task-def.json | jq -r ".taskDefinition.taskDefinitionArn")
                aws ecs update-service --cluster test-cluster --service my-sample-service --task-definition \$NEW_TASK_DEFINITION_ARN --force-new-deployment
                echo ${NEW_TASK_DEFINITION_ARN}
                '''
            }
        }
    }
    post {
        always {
            sh "docker logout"
        }
    }
}