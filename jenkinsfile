pipeline {
    agent any

    stages { 
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/joseh-my-projects/jenkins.git'
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS']]) {
                    // Login to ECR
                    sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 573055573761.dkr.ecr.us-east-1.amazonaws.com/ecs-images"  
                }
            }
        }
        stage('Build And Tag') {
            steps {
                // Build Docker image
                sh "docker build -t sample-app:v${BUILD_NUMBER} ."
        
                // Tag Docker image
                sh "docker tag sample-app:v${BUILD_NUMBER} 573055573761.dkr.ecr.us-east-1.amazonaws.com/ecs-images:sample-app-v${BUILD_NUMBER}"

                // Show images
                sh "docker images"
            }
        }
        stage('Push') {
            steps {
                // Push Docker image to ECR
                sh "docker push 573055573761.dkr.ecr.us-east-1.amazonaws.com/ecs-images:sample-app-v${BUILD_NUMBER}"
                sh "docker image prune -f --force"
            }
        }
        stage('Get ECS task') {
            steps {
                sh "aws ecs describe-task-definition --task-definition sample-test"
                sh "pwd"
                sh "jq '.taskDefinition | .containerDefinitions[0].image=\"573055573761.dkr.ecr.us-east-1.amazonaws.com/ecs-images:sample-app-v${BUILD_NUMBER}\" | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.compatibilities)' task-definition.json > new-task-definition.json"
                sh "pwd"
                sh "aws ecs register-task-definition --cli-input-json file://new-task-definition.json"
                sh "aws ecs describe-task-definition --task-definition sample-test"
            }
        }
    }
    post {
            always {
                sh "docker logout"
            }
        }
}